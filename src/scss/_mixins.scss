/**********************************************************/
/*                                                       */
/*   SASS Mixins (_mixins.scss)                         */
/*                                                     */
/******************************************************/
/*
*****************
*   Contents:   *
*****************

  # Device Sizes
  # Touch Device
    > Has Touch
    > Has No Touch
    > Touch Styles
  # Text Styles
  # Animations

******************/

/********************************************/
/*   # Device Sizes                        */
/******************************************/

@mixin forTiny{
  @media (max-width: ($deviceWidthSmall - 1)){
    @content;
  }
}

@mixin atSmall{
    @media (min-width: $deviceWidthSmall){
      @content;
    }
}

@mixin atMedium{
  @media (min-width: $deviceWidthMedium){
    @content;
  }
}

@mixin atLarge {
  @media (min-width: $deviceWidthLarge){
    @content;
  }
}

@mixin atXLarge {
  @media (min-width: $deviceWidthXLarge){
    @content;
  }
}

/********************************************/
/*   # Touch Device                        */
/******************************************/

/*****************
*  > Has Touch   *
*****************/

/*
  Has Touch:
  Use the contents when an outter wrapper contains the 'has-touch' class
  (meaning a user touch event has been detected).

  $wrapperClass (default: false)
    add a class selector BETWEEN the wrapper with the 'has-touch' class
    and the element being styled.

    Example:
    @include hasTouch('editable'){
      input {
        opacity: 1;
      }
    }
    Would style:
    <body class="has-touch">
      <div class="editable">
        <input ...>
      </div>
    </body>
*/
@mixin hasTouch($wrapperClass: false) {
  @if($wrapperClass){
    .has-touch .#{$wrapperClass} :host {
      @content;
    }
  }@else {
    .has-touch :host {
      @content;
    }
  }
}

/********************
*  > Has No Touch   *
********************/

/*
  Has No Touch:
  Use the contents when an outter wrapper contains the 'has-no-touch' class
  (meaning no user touch event has been detected, yet).

  $wrapperClass (default: false)
    add a class selector BETWEEN the wrapper with the 'has-no-touch' class
    and the element being styled.

    Example:
    @include hasNoTouch('editable'){
      input {
        opacity: .5;
      }
    }
    Would style:
    <body class="has-no-touch">
      <div class="editable">
        <input ...>
      </div>
    </body>
*/
@mixin hasNoTouch($wrapperClass: false) {
  @if($wrapperClass){
    .has-no-touch .#{$wrapperClass} :host {
      @content;
    }
  }@else {
    .has-no-touch :host {
      @content;
    }
  }
}

/********************
*  > Touch Styles   *
********************/

@mixin touchTransform($scale: $touchDropMenuIncrease){
  transform: scale($scale);
}

/********************************************/
/*   # Text Styles                         */
/******************************************/

/***************
*  > Capsule   *
***************/

/*
  Text Capsule
  Give a small piece of text the shape of a capsule/pill.
  WARNING: this is designed for a single line of text; if the element is more
            than one line (or a fairly large font size) it may loose the capsule effect.
*/
@mixin textCapsule($bkgdColor: rgb(198, 199, 200), $textColor: rgb(248, 249, 250), $borderRadius: 1rem){
  /*spacing*/
  padding-left: 15px;
  padding-right: 17px;
  padding-top: 5px;
  padding-bottom: 5px;
  /*borders*/
  border-radius: $borderRadius;
  /*colors*/
  background-color: $bkgdColor;
  color: $textColor;
}

/****************
*  > Ellipsis   *
****************/

/*
  Ellipsis Overflow:

  Display an ellipsis in place of overflowing text for a SINGLE LINE.
  If the text is multi line, see mixin ellipsisOverflow--multiline(...)
*/
@mixin ellipsisOverflow(){
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

/*
  Ellipsis Overflow (multiline)

  Display an ellipsis in place of overflowing text for MULTIPLE LINES.
  If the text is single line, see mixin ellipsisOverflow()

  Uses two pseudo elements: one contains the ellipsis, the other covers it.
  When the text get's long enough, the covering pseudo element is pushed down
  to reveal the pseudo element with the ellipsis.

  Parameters:
    $backgroundColor: the color for the pseudo element that covers the ellipsis when not needed.
    $maxHeight: A max width is required to create overflow text.
    $outsideEdge: keep the ellipsis on the outside edge of the text instead of using
                  right padding to reserve a spot for the ellipsis.

  Requirements:
    - Give the element this is applied to a position
    - This element or the element it sits over must have a solid
      & consistant background color.
*/
@mixin ellipsisOverflow--multiline($backgroundColor, $maxHeight, $outsideEdge: false){
  /*overflow*/
  overflow: hidden;
  /*structure*/
  max-height: $maxHeight;
  /*spacing*/
  padding-right: 1em;
  @if($outsideEdge){
    margin-right: -1em;
  }

  /*Pseudo element containing the ellipsis*/
  &::before {
    content: '...';
    /*position*/
    position: absolute;
    right: 0;
    bottom: 0;
    /*structure*/
    width: 1em;
  }

  /*Pseudo element that covers the ellipsis when not needed*/
  &::after {
    content: '';
    /* position */
    position: absolute;
    right: 0;
    /*structure */
    width: 1em;
    height: 100%;
    /*colors*/
    background-color: $backgroundColor;
  }
}

/********************************************/
/*   # Animations                          */
/******************************************/

@mixin rotateForever($speed: 1000ms, $counterClockwise: false){
  /*animation*/
  animation: rotateClockwise;
  animation-iteration-count: infinite;
  animation-timing-function: linear;
  animation-duration: $speed;
  @if $counterClockwise {
    animation-direction: reverse;
  }
}
