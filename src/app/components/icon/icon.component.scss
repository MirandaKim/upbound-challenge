@import "src/scss/_variables.scss";
@import "src/scss/_mixins.scss";

/**********************************************************/
/*                                                       */
/*   Icon (icon.component.scss)                         */
/*                                                     */
/******************************************************/
/*

************************
*   Availible Colors   *
************************

See $iconColors under 'Variables' for list of availible icon colors.

***********************
*   Availible Sizes   *
***********************

See $iconAlphaSizes under 'Variables' for list of availible alpha sizes (e.g. 'small', 'medium', 'large', ...)
See $iconSizeRangeStart and $iconSizeRangeEnd under 'Variables' for range of availible integer sizes (e.g. '13', '14', '15')

Other sizes:
  - 'parent' (goes to 100%x100% of the parent element)
  - 'parent-height' (goes to 100% of the parent element's height)
  - 'parent-width' (goes to 100% of the parent element's width)

*****************
*   Contents:   *
*****************

  # Variables
    > Icon Colors
    > Icon Sizes
    > Icon Size Overrides
  # Icon
  # SVG
  # Fill
  # Fill on Hover
  # Sizes
    > Alpha Sizes
    > Integer Sizes
    > Other Sizes
    > Size Overrides

******************/


/********************************************/
/*   # Variables                           */
/******************************************/

/******************
*  > Icon Colors  *
******************/

/*
  Colors:
  List of color identifiers and their color value.
  Feel free to add more key/value pairs--sass generates the classes.
  EXAMPLE:
    'black': rgb(0, 0, 0) will become the class icon--fill-black,
    which will make the icon's fill rgb(0, 0, 0)

*/
$iconColors: (
  // Grayscale
  'white': $colorWhite,
  'light-grey': $colorLightGrey,
  'light-gray': $colorLightGrey,
  'medium-grey': $colorMediumGrey,
  'medium-gray': $colorMediumGrey,
  'dark-grey': $colorDarkGrey,
  'dark-gray': $colorDarkGrey,
  'black': $colorBlack,
  // Rainbow
  'orange': $colorOrange,
  'dark-orange': $colorDarkOrange,
  'red': $colorRed,
  'green': $colorGreen
);

/*****************
*  > Icon Sizes  *
*****************/

/*
  Default Size: the size of the icon if no other icon size class is added.
*/
$iconDefaultSize: 20px;

/*
  Alpha Sizes:
  List of size identifiers and their size value.
  Feel free to add more key/value pairs--sass generates the classes.
  EXAMPLE:
    'tiny': 6px will become the class icon--size-tiny,
    which will make an icon 6x6
*/
$iconAlphaSizes: (
  'tiny': 6px,
  'x-small': 9px,
  'small': 14px,
  'medium': 20px,
  'large': 22px,
  'x-large': 24px,
  'giant': 60px
);

/*
  Range used to generate icon size integer classes
  (e.g. icon--size-13 will give you a 13x13 icon)
*/
$iconSizeRangeStart: 5; // smallest pixel value
$iconSizeRangeEnd: 25; // largest pixel value

/**************************
*  > Icon Size Overrides  *
**************************/

/*
  List of icons to create size overrides for.
  Property is icon identifier, and value is the change ratio.
  (to make icon smaller, use a change ratio < 1)
  (to make icon larger, use a change ratio > 1)
  Ex: 14px * 1.
*/
$iconAlphaSizeOverrideRatios: (
  'people': 1.15,
  'eye': 1.36
);


/********************************************/
/*   # Icon                                */
/******************************************/

app-icon {
  /*display*/
  display: inline-block;
}

/********************************************/
/*   # SVG                                 */
/******************************************/

svg{
  /*display*/
  display: inline-block;
  /*position*/
  position: relative;
  top: -2px;
  /*structure*/
  width: $iconDefaultSize;
  height: $iconDefaultSize;
  /*colors*/
  fill: $colorMediumGrey;


}


.browser-is-chrome :host {
  svg {
    top: -1px;
  }
}

/********************************************/
/*   # Fill                                */
/******************************************/

.icon--fill {
  /*
  Loop through each icon color to create an icon color class for each availible color.
  */
  @each $iconColorProp, $iconColorVal in $iconColors {
    &-#{$iconColorProp} {
      fill: $iconColorVal;
    }
  }

}

/********************************************/
/*   # Fill on Hover                       */
/******************************************/

.icon--fill-on-hover {
  /*
  Loop through each icon color to create an icon color hover class for each availible color.
  */
  @each $iconColorProp, $iconColorVal in $iconColors {
    &-#{$iconColorProp}:hover {
      fill: $iconColorVal;
    }
  }

}

/********************************************/
/*   # Sizes                               */
/******************************************/

.icon--size {

  /*******************
  *  > Alpha Sizes   *
  *******************/

  /*
  Loop through each alpha size to create a list of icon size classes
  (ex: .icon--size-small)
  */
  @each $alphaSizeProp, $alphaSizeVal in $iconAlphaSizes {
    &-#{$alphaSizeProp} {
      height: $alphaSizeVal;
      width: $alphaSizeVal;
    }
  }

  /*********************
  *  > Integer Sizes   *
  *********************/

  /*
  Create a range of icon size classes
  (e.g. icon--size-13, icon--size-14, icon--size-15...)
  */
  @for $iSize from $iconSizeRangeStart through $iconSizeRangeEnd {
    &-#{$iSize} {
      height: #{$iSize}px;
      width: #{$iSize}px;
    }
  }

  /*******************
  *  > Other Sizes   *
  *******************/

  &-parent {
    height: 100%;
    width: 100%;
  }

  &-parent-height {
    height: 100%;
    width: auto;
  }

  &-parent-width {
    height: auto;
    width: 100%;
  }


}

/**********************
*  > Size Overrides   *
**********************/
/*Include any size overrides specific to any icons here*/
/*This is to be used when an icon seems out of scale with icons of the same size.*/

@each $iconName, $iconChangeRatio in $iconAlphaSizeOverrideRatios {
  .icon--#{$iconName} {
    &.icon--size {
      /*
      Loop through each alpha size to create an override for the icon
      */
      @each $alphaSizeProp, $alphaSizeVal in $iconAlphaSizes {
        &-#{$alphaSizeProp} {
          height: $iconChangeRatio * $alphaSizeVal;
          width: $iconChangeRatio * $alphaSizeVal;
        }
      }
    }
  }
}
